import pandas as pd
import numpy as np
import time
import streamlit as st
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from ersalib import elinearRegression

st.title("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: —Å–≤–æ—è vs sklearn")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
df = pd.read_csv("real_estate_database_with_floor.csv")

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['Location'] = label_encoder.fit_transform(df['Location'])
df['Status'] = label_encoder.fit_transform(df['Status'])
df['Floor Quality'] = label_encoder.fit_transform(df['Floor Quality'])
df['City'] = label_encoder.fit_transform(df['City'])

X = df[['Rooms', 'Location', 'Area (sqm)', 'Floor Quality', 'Status', 'City']]
y = df['Price (in tenge)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

st.subheader("üè° –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã")
city = st.selectbox('–ì–æ—Ä–æ–¥', ['Almaty', 'Astana', 'Shymkent', 'Karaganda'])
rooms = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', min_value=1, max_value=5, value=2)
location = st.selectbox('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', ['Center', 'Outskirts', 'Near Center'])
area = st.number_input('–ü–ª–æ—â–∞–¥—å (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö)', min_value=50, max_value=5000, value=100)
status = st.selectbox('–°—Ç–∞—Ç—É—Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', ['Under Construction', 'Ready to Move'])

location_encoded = label_encoder.fit(['Center', 'Outskirts', 'Near Center']).transform([location])[0]
status_encoded = label_encoder.fit(['Under Construction', 'Ready to Move']).transform([status])[0]
city_encoded = label_encoder.fit(['Almaty', 'Astana', 'Shymkent', 'Karaganda']).transform([city])[0]
floor_quality_encoded = label_encoder.fit(['Normal', 'Not Very Good', 'Good']).transform(['Normal'])[0]

input_data = [[rooms, location_encoded, area, floor_quality_encoded, status_encoded, city_encoded]]

if st.button("üîç –°—Ä–∞–≤–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏"):
    results = []

    # Sklearn
    start = time.time()
    sk_model = LinearRegression()
    sk_model.fit(X_train, y_train)
    train_time = time.time() - start

    start = time.time()
    sk_preds = sk_model.predict(X_test)
    sk_price = sk_model.predict(input_data)[0]
    pred_time = time.time() - start

    sk_score = r2_score(y_test, sk_preds)
    results.append(["Sklearn LinearRegression", sk_score, train_time, pred_time, sk_price])

    # –°–≤–æ—è
    start = time.time()
    my_model = elinearRegression()
    my_model.fit(X_train.values.tolist(), y_train.values.tolist())
    train_time = time.time() - start

    start = time.time()
    my_preds = my_model.predict(X_test.values.tolist())
    my_price = my_model.predict(input_data)[0]
    pred_time = time.time() - start

    my_score = r2_score(y_test, my_preds)
    results.append(["–ú–æ—è elinearRegression", my_score, train_time, pred_time, my_price])

    # –í—ã–≤–æ–¥–∏–º
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    df_results = pd.DataFrame(results, columns=["–ú–æ–¥–µ–ª—å", "R¬≤", "–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (—Å–µ–∫)", "–í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Å–µ–∫)", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (—Ç–µ–Ω–≥–µ)"])
    st.dataframe(df_results)

    st.bar_chart(df_results.set_index("–ú–æ–¥–µ–ª—å")["R¬≤"])